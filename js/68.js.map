{"version":3,"sources":["webpack://ansible-dashboard/./node_modules/redux-promise-middleware/dist/es/isPromise.js","webpack://ansible-dashboard/./node_modules/redux-promise-middleware/dist/es/index.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","isPromise","value","then","_slicedToArray","arr","i","Array","isArray","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","sliceIterator","TypeError","_extends","assign","target","arguments","source","key","hasOwnProperty","call","ActionType","Pending","Fulfilled","Rejected","createPromise","config","defaultTypes","PROMISE_TYPE_SUFFIXES","promiseTypeSuffixes","PROMISE_TYPE_DELIMITER","promiseTypeDelimiter","ref","dispatch","action","promise","data","payload","PAYLOAD","TYPE","type","META","meta","_PROMISE_TYPE_SUFFIXE","PENDING","FULFILLED","REJECTED","getAction","newPayload","isRejected","join","error","resolvedAction","reason","rejectedAction","middleware","_ref","process","env"],"mappings":"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","file":"js/68.js","sourcesContent":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexport default function isPromise(value) {\n  if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n    return value && typeof value.then === 'function';\n  }\n\n  return false;\n}","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport isPromise from './isPromise.js';\n\n/**\n * For TypeScript support: Remember to check and make sure\n * that `index.d.ts` is also up to date with the implementation.\n */\nexport var ActionType = {\n  Pending: 'PENDING',\n  Fulfilled: 'FULFILLED',\n  Rejected: 'REJECTED'\n};\n\n/**\n * Function: createPromise\n * Description: The main createPromise accepts a configuration\n * object and returns the middleware.\n */\nexport function createPromise() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var defaultTypes = [ActionType.Pending, ActionType.Fulfilled, ActionType.Rejected];\n  var PROMISE_TYPE_SUFFIXES = config.promiseTypeSuffixes || defaultTypes;\n  var PROMISE_TYPE_DELIMITER = config.promiseTypeDelimiter || '_';\n\n  return function (ref) {\n    var dispatch = ref.dispatch;\n\n\n    return function (next) {\n      return function (action) {\n\n        /**\n         * Instantiate variables to hold:\n         * (1) the promise\n         * (2) the data for optimistic updates\n         */\n        var promise = void 0;\n        var data = void 0;\n\n        /**\n         * There are multiple ways to dispatch a promise. The first step is to\n         * determine if the promise is defined:\n         * (a) explicitly (action.payload.promise is the promise)\n         * (b) implicitly (action.payload is the promise)\n         * (c) as an async function (returns a promise when called)\n         *\n         * If the promise is not defined in one of these three ways, we don't do\n         * anything and move on to the next middleware in the middleware chain.\n         */\n\n        // Step 1a: Is there a payload?\n        if (action.payload) {\n          var PAYLOAD = action.payload;\n\n          // Step 1.1: Is the promise implicitly defined?\n          if (isPromise(PAYLOAD)) {\n            promise = PAYLOAD;\n          }\n\n          // Step 1.2: Is the promise explicitly defined?\n          else if (isPromise(PAYLOAD.promise)) {\n              promise = PAYLOAD.promise;\n              data = PAYLOAD.data;\n            }\n\n            // Step 1.3: Is the promise returned by an async function?\n            else if (typeof PAYLOAD === 'function' || typeof PAYLOAD.promise === 'function') {\n                promise = PAYLOAD.promise ? PAYLOAD.promise() : PAYLOAD();\n                data = PAYLOAD.promise ? PAYLOAD.data : undefined;\n\n                // Step 1.3.1: Is the return of action.payload a promise?\n                if (!isPromise(promise)) {\n\n                  // If not, move on to the next middleware.\n                  return next(_extends({}, action, {\n                    payload: promise\n                  }));\n                }\n              }\n\n              // Step 1.4: If there's no promise, move on to the next middleware.\n              else {\n                  return next(action);\n                }\n\n          // Step 1b: If there's no payload, move on to the next middleware.\n        } else {\n          return next(action);\n        }\n\n        /**\n         * Instantiate and define constants for:\n         * (1) the action type\n         * (2) the action meta\n         */\n        var TYPE = action.type;\n        var META = action.meta;\n\n        /**\n         * Instantiate and define constants for the action type suffixes.\n         * These are appended to the end of the action type.\n         */\n\n        var _PROMISE_TYPE_SUFFIXE = _slicedToArray(PROMISE_TYPE_SUFFIXES, 3),\n            PENDING = _PROMISE_TYPE_SUFFIXE[0],\n            FULFILLED = _PROMISE_TYPE_SUFFIXE[1],\n            REJECTED = _PROMISE_TYPE_SUFFIXE[2];\n\n        /**\n         * Function: getAction\n         * Description: This function constructs and returns a rejected\n         * or fulfilled action object. The action object is based off the Flux\n         * Standard Action (FSA).\n         *\n         * Given an original action with the type FOO:\n         *\n         * The rejected object model will be:\n         * {\n         *   error: true,\n         *   type: 'FOO_REJECTED',\n         *   payload: ...,\n         *   meta: ... (optional)\n         * }\n         *\n         * The fulfilled object model will be:\n         * {\n         *   type: 'FOO_FULFILLED',\n         *   payload: ...,\n         *   meta: ... (optional)\n         * }\n         */\n\n\n        var getAction = function getAction(newPayload, isRejected) {\n          return _extends({\n            // Concatenate the type string property.\n            type: [TYPE, isRejected ? REJECTED : FULFILLED].join(PROMISE_TYPE_DELIMITER)\n\n          }, newPayload === null || typeof newPayload === 'undefined' ? {} : {\n            payload: newPayload\n          }, META !== undefined ? { meta: META } : {}, isRejected ? {\n            error: true\n          } : {});\n        };\n\n        /**\n         * Function: handleReject\n         * Calls: getAction to construct the rejected action\n         * Description: This function dispatches the rejected action and returns\n         * the original Error object. Please note the developer is responsible\n         * for constructing and throwing an Error object. The middleware does not\n         * construct any Errors.\n         */\n        var handleReject = function handleReject(reason) {\n          var rejectedAction = getAction(reason, true);\n          dispatch(rejectedAction);\n\n          throw reason;\n        };\n\n        /**\n         * Function: handleFulfill\n         * Calls: getAction to construct the fullfilled action\n         * Description: This function dispatches the fulfilled action and\n         * returns the success object. The success object should\n         * contain the value and the dispatched action.\n         */\n        var handleFulfill = function handleFulfill() {\n          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n          var resolvedAction = getAction(value, false);\n          dispatch(resolvedAction);\n\n          return { value: value, action: resolvedAction };\n        };\n\n        /**\n         * First, dispatch the pending action:\n         * This object describes the pending state of a promise and will include\n         * any data (for optimistic updates) and/or meta from the original action.\n         */\n        next(_extends({\n          // Concatenate the type string.\n          type: [TYPE, PENDING].join(PROMISE_TYPE_DELIMITER)\n\n        }, data !== undefined ? { payload: data } : {}, META !== undefined ? { meta: META } : {}));\n\n        /**\n         * Second, dispatch a rejected or fulfilled action and move on to the\n         * next middleware.\n         */\n        return promise.then(handleFulfill, handleReject);\n      };\n    };\n  };\n}\n\nexport default function middleware() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      dispatch = _ref.dispatch;\n\n  if (typeof dispatch === 'function') {\n    return createPromise()({ dispatch: dispatch });\n  }\n\n  if (process && process.env && process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.warn('Redux Promise Middleware: As of version 6.0.0, the middleware library supports both preconfigured and custom configured middleware. To use a custom configuration, use the \"createPromise\" export and call this function with your configuration property. To use a preconfiguration, use the default export. For more help, check the upgrading guide: https://docs.psb.design/redux-promise-middleware/upgrade-guides/v6\\n\\nFor custom configuration:\\nimport { createPromise } from \\'redux-promise-middleware\\';\\nconst promise = createPromise({ types: { fulfilled: \\'success\\' } });\\napplyMiddleware(promise);\\n\\nFor preconfiguration:\\nimport promise from \\'redux-promise-middleware\\';\\napplyMiddleware(promise);\\n    ');\n  }\n\n  return null;\n}"],"sourceRoot":""}