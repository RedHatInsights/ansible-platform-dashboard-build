{"version":3,"file":"js/66.1651675386564.2b129398c3f3938b25cc.js","mappings":"8PAaiBA,OAAOC,SAASC,SAASC,MAAM,KAEvCC,QA2CT,QAzCY,WACV,OAAgDC,EAAAA,EAAAA,YAAhD,eAAQC,EAAR,KAAyBC,EAAzB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,CAAEG,SAAU,KAA/D,eAAQC,EAAR,KAAsBC,EAAtB,KACA,GAA0BL,EAAAA,EAAAA,WAAS,GAAnC,eAAQM,EAAR,KAAcC,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRC,SAASC,OAAOC,OAChBF,SAASC,OAAOJ,KAAKM,UAAUC,MAAK,SAACC,GAEnC,OADAT,EAAgBS,GACTL,SAASC,OACfK,qBACAF,MAAK,SAACG,GAAD,OAAUd,EAAmBc,SAClCH,MAAK,kBAAMN,GAAQ,MACtBE,SAASC,OAAOO,YAAY,qBAC5BR,SAASC,OAAOQ,YAAY,CAAEC,GAAI,wBACjC,IAEEb,EAMH,kBAAC,aAAD,CACEc,MAAQ,CAAEC,YAAapB,EAAiBG,aAAAA,IAExC,kBAAC,EAAAkB,SAAD,CAAUC,SAAW,kBAAC,IAAD,OACnB,kBAAC,IAAD,CAAcC,OAAO,MACnB,kBAAC,aAAD,KACE,kBAAC,KAAD,MACA,kBAAC,IAAD,CAAMC,UAAU,sCACd,kBAAC,IAAD,WAbH,kBAAC,IAAD,Q,wIC3BLC,EAAW,kBAAO,kBAAC,KAAD,CAAUC,OAAQA,EAAAA,EAAAA,GAAM,KAC9C,kBAAC,gBAAD,CAAQC,UAAWC,EAAAA,EAAAA,IAAYlC,OAAOC,SAASC,SAAU,IACvD,kBAAC,IAAD,SAKJ6B,EAASI,UAAY,CACnBC,O,MAAQC,GAAAA,MAGV,W,+ECdMC,GAAYC,EAAAA,EAAAA,OAAK,kBAAM,0DACvBC,GAAgBD,EAAAA,EAAAA,OAAK,kBAAM,0DAC3BE,GAAeF,EAAAA,EAAAA,OAAK,kBAAM,0DAC1BG,GAAeH,EAAAA,EAAAA,OAAK,kBAAM,0DAEnBI,EAAS,kBAAM,kBAAC,EAAAC,OAAD,KAC1B,kBAAC,EAAAC,MAAD,CAAOC,KAAOC,EAAAA,GAAsBC,UAAYP,IAChD,kBAAC,EAAAI,MAAD,CAAOC,KAAOG,EAAAA,GAAsBD,UAAYN,IAChD,kBAAC,EAAAG,MAAD,CAAOC,KAAOI,EAAAA,GAAcF,UAAYR,IACxC,kBAAC,EAAAK,MAAD,CAAOC,KAAOK,EAAAA,GAAkBH,UAAYV,IAC5C,kBAAC,EAAAO,MAAD,KACE,kBAAC,EAAAO,SAAD,CAAUC,GAAKF,EAAAA,S,oECKnB,QAjBuB,WACrB,OACE,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAUG,KAAK,OACf,6BACA,kBAAC,IAAD,CAAUA,KAAK,U,6DCTd,IAAMH,EAAkB,qBAClBD,EAAc,2BACdH,EAAsB,mCACtBE,EAAsB,oC,kCCH5B,IAAMM,EAAkB,CAC7BC,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPC,OAAQ,K,uJCDH,IAAMC,EAAmB,mBACnBC,EAAoB,oBACpBC,EAAiB,iBACjBC,EAAyB,yBACzBC,EAAwB,oBACxBC,EAAuB,uBACvBC,EAAgB,gBAKhBC,EAAiB,iBACjBC,EAA4B,4BAC5BC,EAA8B,8BAC9BC,EAAa,aACbC,EAA8B,oBAC9BC,EAA6B,6BAC7BC,EAAsB,uB,opBCT5B,IAAMC,EAAwB,CACnCC,WAAW,EACXC,sBAAsB,EACtBC,SAAS,EACTC,SAAU,CACRzD,KAAM,GACN0D,KAAM,EAAF,GAAOxB,EAAAA,KAEbyB,mBAAoB,CAClBC,cAAe,GACfF,KAAM,EAAF,GAAOxB,EAAAA,KAEb2B,qBAAsB,CACpBD,cAAe,GACfF,KAAM,EAAF,GAAOxB,EAAAA,KAEb4B,SAAU,CACR9D,KAAM,GACN0D,KAAM,EAAF,GAAOxB,EAAAA,MAIT6B,EAAkB,SAACC,GAAD,IAAQC,IAAR,uEACnBD,GADmB,IAEtBV,UAAWW,KAiCb,wBACGf,EAAAA,GAA8Ba,IADjC,SAEGZ,EAAAA,IAhC0B,SAACa,EAAD,WAAUC,QAAAA,OAAV,uBACxBD,GADwB,IAE3BT,qBAAsBU,QA4BxB,SAGGb,EAAAA,IA5BmB,SAACY,EAAD,WAAUC,QAAAA,OAAV,uBACjBD,GADiB,IAEpBR,QAASS,QAuBX,mBAIMnB,EAAAA,GAJN,eApBoB,SAACkB,EAAOC,GAAR,cACfD,GADe,IAElBP,SAAUQ,QAkBZ,mBAKMnB,EAAAA,GALN,YAKiCiB,IALjC,mBAMMhB,EAAAA,GANN,eAf8B,SAACiB,EAAOC,GAAR,cACzBD,GADyB,IAE5BL,mBAAoBM,QAatB,mBAOMlB,EAAAA,GAPN,YAO4CgB,IAP5C,mBAQMf,EAAAA,GARN,eAVgC,SAACgB,EAAOC,GAAR,cAC3BD,GAD2B,IAE9BH,qBAAsBI,QAQxB,mBASMjB,EAAAA,GATN,YAS8Ce,IAT9C,mBAUMd,EAAAA,GAVN,eALoB,SAACe,EAAOC,GAAR,cACfD,GADe,IAElBF,SAAUG,QAGZ,mBAWMhB,EAAAA,GAXN,YAW6Bc,GAX7B,I,opBCxDO,IAAMG,EAAkB,CAC7BZ,WAAW,EACXa,gBAAgB,EAChBX,SAAS,EACTY,WAAY,GACZC,YAAa,CACXrE,KAAM,GACN0D,KAAM,EAAF,GAAOxB,EAAAA,KAEboC,SAAU,CACRtE,KAAM,GACN0D,KAAM,EAAF,GAAOxB,EAAAA,KAEbqC,gBAAiB,CACfvE,KAAM,GACN0D,KAAM,EAAF,GAAOxB,EAAAA,MAIT6B,EAAkB,SAACC,EAAD,WAAUC,QAAAA,OAAV,uBACnBD,GADmB,IAEtBV,UAAWW,KAgCb,wBACGtB,EAAAA,GAAwBoB,IAD3B,SAEGnB,EAAAA,IA/B0B,SAACoB,EAAD,WAAUC,QAAAA,OAAV,uBACxBD,GADwB,IAE3BG,eAAgBF,QA2BlB,SAGGpB,EAAAA,IA3BmB,SAACmB,EAAD,WAAUC,QAAAA,OAAV,uBACjBD,GADiB,IAEpBR,QAASS,QAsBX,mBAIM1B,EAAAA,GAJN,YAImCwB,IAJnC,mBAKMxB,EAAAA,GALN,eAfsB,SAACyB,EAAD,OAAUC,EAAV,EAAUA,QAAV,cACjBD,GADiB,IAEpBI,WAAYH,QAad,mBAMMzB,EAAAA,GANN,eApBuB,SAACwB,EAAD,OAAUC,EAAV,EAAUA,QAAV,cAClBD,GADkB,IAErBK,YAAaJ,QAkBf,mBAOMzB,EAAAA,GAPN,YAOoCuB,IAPpC,mBAQMtB,EAAAA,GARN,YAQiCsB,IARjC,mBASMtB,EAAAA,GATN,eAVoB,SAACuB,EAAD,OAAUC,EAAV,EAAUA,QAAV,cACfD,GADe,IAElBM,SAAUL,QAQZ,mBAUMvB,EAAAA,GAVN,YAUyCqB,IAVzC,mBAWMrB,EAAAA,GAXN,eAL2B,SAACsB,EAAD,OAAUC,EAAV,EAAUA,QAAV,cACtBD,GADsB,IAEzBO,gBAAiBN,QAGnB,mBAYMxB,EAAAA,GAZN,YAYiCsB,GAZjC,I,gCC7DA,SAFoBS,E,SAAAA,eAAc,K,qICsClC,QA7BiB,WAAsB,IAArBC,EAAqB,uDAAP,GACxBC,EAAW,IAAIC,EAAAA,GAAgB,GAApB,CACfC,EAAAA,EACAC,KACAC,EAAAA,EAAAA,IAAwB,CACtBC,cAAe,CAAE,SAAU,UAAW,cACtCC,oBAAqB,CACnB,wBACA,cACA,aACA,eACA,uBACA,OACA,eACA,YAbW,eAgBZP,KASL,OANAC,EAASO,SAAS,CAChBC,kBAAkBC,EAAAA,EAAAA,IAAiBD,EAAAA,EAAkB7B,EAAAA,GACrD+B,YAAYD,EAAAA,EAAAA,IAAiBC,EAAAA,EAAYlB,EAAAA,GACzCN,cAAeyB,EAAAA,KAGVX,EAASY,a","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/components/shared/loader-placeholders.js","webpack:///./src/constants/routes.js","webpack:///./src/helpers/shared/pagination.js","webpack:///./src/redux/action-types.js","webpack:///./src/redux/reducers/analytics-reducer.js","webpack:///./src/redux/reducers/hub-reducer.js","webpack:///./src/user-context.js","webpack:///./src/utilities/store.js"],"sourcesContent":["import React, { useState, useEffect, Suspense } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { Routes } from './Routes';\n// react-int eng locale data\nimport { IntlProvider } from 'react-intl';\nimport UserContext from './user-context';\n\nimport './App.scss';\nimport '@patternfly/pfe-icon';\n\nimport AppPlaceholder from './components/shared/loader-placeholders';\n\nconst pathName = window.location.pathname.split('/');\n\npathName.shift();\n\nconst App = () => {\n  const [ userPermissions, setUserPermissions ] = useState();\n  const [ userIdentity, setUserIdentity ] = useState({ identity: {}});\n  const [ auth, setAuth ] = useState(false);\n\n  useEffect(() => {\n    insights.chrome.init();\n    insights.chrome.auth.getUser().then((user) => {\n      setUserIdentity(user);\n      return insights.chrome\n      .getUserPermissions()\n      .then((data) => setUserPermissions(data));\n    }).then(() => setAuth(true));\n    insights.chrome.identifyApp('ansible-dashboard');\n    insights.chrome.appNavClick({ id: 'ansible-dashboard' });\n  }, []);\n\n  if (!auth) {\n    return <AppPlaceholder />;\n  }\n\n  return (\n\n    <UserContext.Provider\n      value={ { permissions: userPermissions, userIdentity } }\n    >\n      <Suspense fallback={ <AppPlaceholder /> }>\n        <IntlProvider locale=\"en\">\n          <React.Fragment>\n            <NotificationsPortal />\n            <Main className=\"ans-c-dashboard pf-u-p-0 pf-u-ml-0\">\n              <Routes />\n            </Main>\n          </React.Fragment>\n        </IntlProvider>\n      </Suspense>\n    </UserContext.Provider>\n\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './utilities/store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport PropTypes from 'prop-types';\n\nconst AppEntry = () => (<Provider store={ store([]) }>\n  <Router basename={ getBaseName(window.location.pathname, 1) }>\n    <App/>\n  </Router>\n</Provider>\n);\n\nAppEntry.propTypes = {\n  logger: PropTypes.func\n};\n\nexport default AppEntry;\n","import React, { lazy } from 'react';\n\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { DASHBOARD_ROUTE, TRIAL_EXPIRED_ROUTE, TRIAL_ROUTE, TRIAL_SUCCESS_ROUTE } from './constants/routes';\n\nconst Dashboard = lazy(() => import(/* webpackChunkName: 'ansible-dashboard-route' */ './components/dashboard/dashboard'));\nconst TrialOverview = lazy(() => import(/* webpackChunkName: 'ansible-dashboard-route' */ './components/trial/overview'));\nconst TrialSuccess = lazy(() => import(/* webpackChunkName: 'ansible-dashboard-route' */ './components/trial/success'));\nconst TrialExpired = lazy(() => import(/* webpackChunkName: 'ansible-dashboard-route' */ './components/trial/expired'));\n\nexport const Routes = () => <Switch>\n  <Route path={ TRIAL_SUCCESS_ROUTE } component={ TrialSuccess }/>\n  <Route path={ TRIAL_EXPIRED_ROUTE } component={ TrialExpired }/>\n  <Route path={ TRIAL_ROUTE } component={ TrialOverview }/>\n  <Route path={ DASHBOARD_ROUTE } component={ Dashboard }/>\n  <Route>\n    <Redirect to={ DASHBOARD_ROUTE }/>\n  </Route>\n</Switch>;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nconst AppPlaceholder = () => {\n  return (\n    <React.Fragment>\n      <Skeleton size=\"md\" />\n      <br />\n      <Skeleton size=\"md\" />\n    </React.Fragment>\n  );\n};\n\nexport const IconPlaceholder = ({\n  height\n}) => (\n  <svg height={ height } width={ height }>\n    <circle cx={ height / 2 } cy={ height / 2 } r={ height / 2 } fill=\"#ecebeb\" />\n  </svg>\n);\nexport default AppPlaceholder;\n","export const DASHBOARD_ROUTE = '/ansible-dashboard';\nexport const TRIAL_ROUTE = '/ansible-dashboard/trial';\nexport const TRIAL_SUCCESS_ROUTE = '/ansible-dashboard/trial/success';\nexport const TRIAL_EXPIRED_ROUTE = '/ansible-dashboard/trial/expired';\n","export const defaultSettings = {\n  limit: 1,\n  offset: 0,\n  count: 0,\n  filter: ''\n};\n\nexport const getCurrentPage = (limit = 1, offset = 0) =>\n  Math.floor(offset / limit) + 1;\n\nexport const getNewPage = (page = 1, offset = 0) => (page - 1) * offset;\n","/**\n * Automation hub actions\n */\nexport const FETCH_COLLECTION = 'FETCH_COLLECTION';\nexport const FETCH_COLLECTIONS = 'FETCH_COLLECTIONS';\nexport const FETCH_PARTNERS = 'FETCH_PARTNERS';\nexport const FETCH_SYNC_COLLECTIONS = 'FETCH_SYNC_COLLECTIONS';\nexport const SET_HUB_LOADING_STATE = 'SET_LOADING_STATE';\nexport const SET_HUB_AVAILABILITY = 'SET_HUB_AVAILABILITY';\nexport const SET_HUB_ERROR = 'SET_HUB_ERROR';\n\n/**\n * Tower analytics actions\n */\nexport const FETCH_CLUSTERS = 'FETCH_CLUSTERS';\nexport const FETCH_ERROR_NOTIFICATIONS = 'FETCH_ERROR_NOTIFICATIONS';\nexport const FETCH_WARNING_NOTIFICATIONS = 'FETCH_WARNING_NOTIFICATIONS';\nexport const FETCH_JOBS = 'FETCH_JOBS';\nexport const SET_ANALYTICS_LOADING_STATE = 'SET_LOADING_STATE';\nexport const SET_ANALYTICS_AVAILABILITY = 'SET_ANALYTICS_AVAILABILITY';\nexport const SET_ANALYTICS_ERROR = 'SET_ANALYTICS_ERROR';\n/**\n * In18l actions\n */\n\nexport const INITIALIZE_I18N = '@@i18l/INITIALIZE_I18N';\n","import { FETCH_CLUSTERS,\n  FETCH_ERROR_NOTIFICATIONS,\n  FETCH_WARNING_NOTIFICATIONS,\n  FETCH_JOBS,\n  SET_ANALYTICS_LOADING_STATE,\n  SET_ANALYTICS_AVAILABILITY,\n  SET_ANALYTICS_ERROR\n} from '../action-types';\n\nimport { defaultSettings } from '../../helpers/shared/pagination';\n// Initial State\nexport const analyticsInitialState = {\n  isLoading: false,\n  isAnalyticsAvailable: true,\n  isError: false,\n  clusters: {\n    data: [],\n    meta: { ...defaultSettings }\n  },\n  errorNotifications: {\n    notifications: [],\n    meta: { ...defaultSettings }\n  },\n  warningNotifications: {\n    notifications: [],\n    meta: { ...defaultSettings }\n  },\n  jobsData: {\n    data: [],\n    meta: { ...defaultSettings }\n  }\n};\n\nconst setLoadingState = (state, payload = true) => ({\n  ...state,\n  isLoading: payload\n});\n\nconst setAvailabilityState = (state, { payload = true }) => ({\n  ...state,\n  isAnalyticsAvailable: payload\n});\n\nconst setErrorState = (state, { payload = true }) => ({\n  ...state,\n  isError: payload\n});\n\nconst setClusters = (state, payload) => ({\n  ...state,\n  clusters: payload\n});\n\nconst setErrorNotifications = (state, payload) => ({\n  ...state,\n  errorNotifications: payload\n});\n\nconst setWarningNotifications = (state, payload) => ({\n  ...state,\n  warningNotifications: payload\n});\n\nconst setJobsData = (state, payload) => ({\n  ...state,\n  jobsData: payload\n});\n\nexport default {\n  [SET_ANALYTICS_LOADING_STATE]: setLoadingState,\n  [SET_ANALYTICS_AVAILABILITY]: setAvailabilityState,\n  [SET_ANALYTICS_ERROR]: setErrorState,\n  [`${FETCH_CLUSTERS}_FULFILLED`]: setClusters,\n  [`${FETCH_CLUSTERS}_PENDING`]: setLoadingState,\n  [`${FETCH_ERROR_NOTIFICATIONS}_FULFILLED`]: setErrorNotifications,\n  [`${FETCH_ERROR_NOTIFICATIONS}_PENDING`]: setLoadingState,\n  [`${FETCH_WARNING_NOTIFICATIONS}_FULFILLED`]: setWarningNotifications,\n  [`${FETCH_WARNING_NOTIFICATIONS}_PENDING`]: setLoadingState,\n  [`${FETCH_JOBS}_FULFILLED`]: setJobsData,\n  [`${FETCH_JOBS}_PENDING`]: setLoadingState\n};\n","import {\n  FETCH_COLLECTION,\n  FETCH_COLLECTIONS,\n  FETCH_PARTNERS,\n  FETCH_SYNC_COLLECTIONS,\n  SET_HUB_AVAILABILITY,\n  SET_HUB_ERROR,\n  SET_HUB_LOADING_STATE\n} from '../action-types';\n\nimport { defaultSettings } from '../../helpers/shared/pagination';\n// Initial State\nexport const hubInitialState = {\n  isLoading: false,\n  isHubAvailable: true,\n  isError: false,\n  collection: {},\n  collections: {\n    data: [],\n    meta: { ...defaultSettings }\n  },\n  partners: {\n    data: [],\n    meta: { ...defaultSettings }\n  },\n  syncCollections: {\n    data: [],\n    meta: { ...defaultSettings }\n  }\n};\n\nconst setLoadingState = (state, { payload = true }) => ({\n  ...state,\n  isLoading: payload\n});\n\nconst setAvailabilityState = (state, { payload = true }) => ({\n  ...state,\n  isHubAvailable: payload\n});\n\nconst setErrorState = (state, { payload = true }) => ({\n  ...state,\n  isError: payload\n});\nconst setCollections = (state, { payload }) => ({\n  ...state,\n  collections: payload\n});\n\nconst setCollection = (state, { payload }) => ({\n  ...state,\n  collection: payload\n});\n\nconst setPartners = (state, { payload }) => ({\n  ...state,\n  partners: payload\n});\n\nconst setSyncCollections = (state, { payload }) => ({\n  ...state,\n  syncCollections: payload\n});\n\nexport default {\n  [SET_HUB_LOADING_STATE]: setLoadingState,\n  [SET_HUB_AVAILABILITY]: setAvailabilityState,\n  [SET_HUB_ERROR]: setErrorState,\n  [`${FETCH_COLLECTION}_PENDING`]: setLoadingState,\n  [`${FETCH_COLLECTION}_FULFILLED`]: setCollection,\n  [`${FETCH_COLLECTIONS}_FULFILLED`]: setCollections,\n  [`${FETCH_COLLECTIONS}_PENDING`]: setLoadingState,\n  [`${FETCH_PARTNERS}_PENDING`]: setLoadingState,\n  [`${FETCH_PARTNERS}_FULFILLED`]: setPartners,\n  [`${FETCH_SYNC_COLLECTIONS}_PENDING`]: setLoadingState,\n  [`${FETCH_SYNC_COLLECTIONS}_FULFILLED`]: setSyncCollections,\n  [`${FETCH_PARTNERS}_PENDING`]: setLoadingState\n};\n","import { createContext } from 'react';\n\nconst UserContext = createContext({});\n\nexport default UserContext;\n","import promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry, {\n  applyReducerHash\n} from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nimport thunk from 'redux-thunk';\nimport hubReducer, { hubInitialState } from '../redux/reducers/hub-reducer';\nimport analyticsReducer, { analyticsInitialState } from '../redux/reducers/analytics-reducer';\n\nconst getStore = (middlewares = []) => {\n  const registry = new ReducerRegistry({}, [\n    thunk,\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorTitleKey: [ 'errors', 'message', 'statusText' ],\n      errorDescriptionKey: [\n        'data.errors[0].detail',\n        'data.errors',\n        'data.error',\n        'data.message',\n        'response.body.errors',\n        'data',\n        'errorMessage',\n        'stack'\n      ]\n    }),\n    ...middlewares\n  ]);\n\n  registry.register({\n    analyticsReducer: applyReducerHash(analyticsReducer, analyticsInitialState),\n    hubReducer: applyReducerHash(hubReducer, hubInitialState),\n    notifications: notificationsReducer\n  });\n\n  return registry.getStore();\n};\n\nexport default getStore;\n"],"names":["window","location","pathname","split","shift","useState","userPermissions","setUserPermissions","identity","userIdentity","setUserIdentity","auth","setAuth","useEffect","insights","chrome","init","getUser","then","user","getUserPermissions","data","identifyApp","appNavClick","id","value","permissions","Suspense","fallback","locale","className","AppEntry","store","basename","getBaseName","propTypes","logger","PropTypes","Dashboard","lazy","TrialOverview","TrialSuccess","TrialExpired","Routes","Switch","Route","path","TRIAL_SUCCESS_ROUTE","component","TRIAL_EXPIRED_ROUTE","TRIAL_ROUTE","DASHBOARD_ROUTE","Redirect","to","size","defaultSettings","limit","offset","count","filter","FETCH_COLLECTION","FETCH_COLLECTIONS","FETCH_PARTNERS","FETCH_SYNC_COLLECTIONS","SET_HUB_LOADING_STATE","SET_HUB_AVAILABILITY","SET_HUB_ERROR","FETCH_CLUSTERS","FETCH_ERROR_NOTIFICATIONS","FETCH_WARNING_NOTIFICATIONS","FETCH_JOBS","SET_ANALYTICS_LOADING_STATE","SET_ANALYTICS_AVAILABILITY","SET_ANALYTICS_ERROR","analyticsInitialState","isLoading","isAnalyticsAvailable","isError","clusters","meta","errorNotifications","notifications","warningNotifications","jobsData","setLoadingState","state","payload","hubInitialState","isHubAvailable","collection","collections","partners","syncCollections","createContext","middlewares","registry","ReducerRegistry","thunk","promiseMiddleware","notificationsMiddleware","errorTitleKey","errorDescriptionKey","register","analyticsReducer","applyReducerHash","hubReducer","notificationsReducer","getStore"],"sourceRoot":""}